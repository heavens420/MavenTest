

百度网盘
uebsd@outlook.com
kj753847

百度文库
	7jkum9
	ufs6b
	
Ghost framework
	
anyto
NYNS2CEFA69090CF7E2CA2EDB01066A99533

用户名: 557154563
密码: 32224838

keyManager恢复密钥：
	2973-7640-EFE0-3B89 C28E-B463-E4B0-9B2B 209A-A387-C558-2BD6 A4B9-5305-5C06-BDFC

莱顿弗罗斯特效应 可以解释不粘锅，但无法实际应用

注册表鼠标右键属性
计算机\HKEY_CLASSES_ROOT\Directory\Background

OA密码,邮箱密码
Heavens420#


将jar包导入maven仓库
mvn install:install-file -Dfile=D:/demo/fiber.jar -DgroupId=com.sure -DartifactId=fiber -Dversion=1.0 -Dpackaging=jar  

vue不识别别名解决办法：
	将module模块下的config.js copy到ws的setting-->Language&Frameworks-->Webpack （C:\Workplaces\vue\w5\cmdb_web\node_modules\@vue\cli-service\webpack.config.js）

idea修改文件路径：
	C:\Users\420\.IntelliJIdea2019.3\config\idea64.exe.vmoptions



运行时使用不同的yml配置文件（application-dev.yml,application-test.yml,application-produce.yml)
java -jar xxx.java --spring.profiles.active=dev(test,produce)

vue 启动报错修复：
	1.npm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver
	2.npm cache clean --force 清除npm的缓存



计算圆周率命令（5000位）：
	time echo "scale=5000; 4*a(1)" | bc -l -q

TimeUnit.SECOND.sleep(3) jdk8 新增线程休眠方法


windows常用命令：	
tasklist -fi "imagename eq nginx.exe"
netstat -aon | findstr "8080"

taskkill /pid 10748 /F

查看服务侦听的端口
natstat -an

查看建立的会话
natstat -n

查看建立的会话的进程
natstat -nb

测试远程计算机的某个端口是否打开
telnet IP port

Linux查看端口被谁占用
	fuser port/tcp
Linux查看磁盘使用情况
	df -h 
查看当前文件夹的磁盘使用情况
	du -h --max-depth=1
	
查找进程：
	pgrep -f name
查找进程并杀掉：
	pkill -f name


编译时多态：方法的重载都是编译时多态
运行时多态：发生在向下转型 方法的重写时 对象引用本类实例为 编译时多态 其它为运行时多态
另说：编译时能找到引用指向的方法 为编译时多态 运行时才能知道引用指向的方法为运行时多态

JVM部分

	ClassLoader只负责加载.class文件 能不能执行由Execution Egnine决定
	Classloader加载文件时 不仅检查文件后缀是否为.class 同时检查文件内容（cafe bean）是否为Java 编译文件
	ClassLoader共有三个,都是系统自带的（也有讲是4个）
		1 BootstrapClassLoader C++编写   启动类加载器
		2 ExtensionClassLoader Java编写 扩展类加载器
		3 AppClassLoader 系统类加载器(也叫 应用程序类加载器) 加载当前classpath的所有类
		4 用户自定义加载器
	对于jdk自带的类 默认使用Bootstrap加载器
	对于自己创建的类 默认使用AppClassLoader加载器

	双亲委派机制:
		当一个类收到类的加载请求时不会立即加载,而是委托给他的父类去加载,父类再委托给其父类加载,
		依此类推,最终每一个类的加载请求都会发送给启动类加载器(BootstrapClassLoader),只有在父类
		加载器反馈找不到请求加载的类时,才会让子类加载器去加载.
		类的加载是 按 Bootstrap --> Extension --> AppClassLoader 的顺序加载的 父类找不到要加载的
		类,就由子类加载,若所有加载器都找不到该类 则报出 ClassNotFound异常

	双亲委派机制保证了 不论是哪个加载器 加载同一个类 最终得到的对象都是一样的
		所以 当我们自己写的类与jdk自带的类重名时 系统会默认加载 系统类 不会加载自己定义的类

	Native Method Stack(本地方法栈)的作用是存放一些调用 C和C++语言的接口,现在已经基本不用

	PC寄存器(Program Counter Register):每个线程都有一个PC寄存器,是线程私有的,就是一个指针,用来
		存储指向下一条指令的地址,也即是即将执行的指令代码,由执行引擎读取下一条指令,是一个非常小
		的内存空间,可以忽略不计
		如果执行的是一个Native方法,那么计数器是空的,因为Native的接口调用的是C/C++程序,不归Java管

	栈管运行,堆管存储
	Java Stack(Java栈) 存放的是8中数据类型+对象的引用变量+实例方法
	在Java栈中 方法称为栈帧

查看本地时间 ：date
设置硬件时间：hwclock --set --date "20191231 15:34:00"

查看硬件时间： hwclock
将本地时间同步为硬件时间(参照时间：硬件时间)：hwclock -s 
将硬件时间同步为本地时间(参照时间：本地时间)：hwclock -w


ifconfig  :  net-tools

yum install bash-completion，安装完成后生效，按下Tab键补全命令

rpm -qa|grep redis

yum list installed


mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup

wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo


vim /etc/sysconfig/selinux

SELINUX=enforcing 改为 SELINUX=disabled

设置centOS7盒盖不休眠
	1 vim  /etc/systemd/logind.conf
	2 修改HandleLidSwitch 的值为 lock
	3 systemctl restart systemd-logind
	
	HandlePowerKey 按下电源键后的行为，默认power off
	HandleSleepKey 按下挂起键后的行为，默认suspend
	HandleHibernateKey 按下休眠键后的行为，默认hibernate
	HandleLidSwitch 合上笔记本盖后的行为，默认suspend
	
	gnore 忽略，跳过
	power off 关机
	eboot 重启
	halt 挂起
	suspend shell内建指令，可暂停目前正在执行的shell。若要恢复，则必须使用SIGCONT信息。所有的进程都会暂停，但不是消失（halt是进程关闭）
	hibernate 让笔记本进入休眠状态
	hybrid-sleep 混合睡眠，主要是为台式机设计的，是睡眠和休眠的结合体，当你选择Hybird时，系统会像休眠一样把内存里的数据从头到尾复制到硬盘里 ，
		然后进入睡眠状态，即内存和CPU还是活动的，其他设置不活动，这样你想用电脑时就可以快速恢复到之前的状态了，笔记本一般不用这个功能。
	lock 仅锁屏，计算机继续工作。

dnf命令：
	删除孤立无援的软件包
		dnf autoremove
	删除缓存中无用的软件包
		dnf clean all
	重装某个软件
		dnf reinstall softName
	删除软件
		dnf remove softName
	查看软件信息
		dnf info softName
	查看以安装的软件包
		dnf list installed
		
docker run --name mysqltest02 -p 3308:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql

w3m 依赖
yum -y install epel-release


配置本地仓库的邮箱账号和用户名(不配置 无法与GitHub建立联系)
	git config --global user.name "自定义名称"
	git config --global user.email "你的邮箱"
查看配置的用户名和邮箱
	git config --global user.name /user.email

配置git代理
	git config --global http.proxy 'socks5://127.0.0.1:1080' 
	git config --global https.proxy 'socks5://127.0.0.1:1080'

查看git代理
	git config --global --get http.proxy
	git config --global --get https.proxy
	
取消git代理
	git config --global --unset http.proxy
	git config --global --unset https.proxy
	
	
创建本地仓库
	git init
添加到本地仓库
	添加全部文件
		git add  .  或 git add all
	添加具体文件
		git add filename
提交文件到到本地仓库 日志信息是必须的 否则无法提交
	git commit -m "日志信息"
若提交信息写错了 可用 --amend 参数 若此时暂存区的文件有变化 也会一起提交 
	git commit --amend -m "新的提交信息"
关联本地仓库和GitHub
	git remote add origin git@github.com:heavens420 / BaseDemo.git(仓库名.git)
提交（主分支 master）本地仓库的文件到GitHub   第一次提交（即仓库中无当前分支） 用参数 -u 以后不用（即仓库中有当前分支）
	git push -u origin master
将子分支推送到云端仓库,这里以login分支为例
	git push -u origin login

从云端GitHub拉取主分支项目
	git clone 项目地址
拉取特定分支项目
	git clone -b url


查看两个版本文件的不同
	git diff filename
查看版本信息
	git log
退回到上一个版本 reset：丢弃提交 提交记录在历史中彻底消失   
				 revert（推荐）：撤销提交，相当于新增一次提交抵消掉上一次提交，历史提交记录还在
	git reset --hard（ -- hard 让工作区即暂存区的文件也回到之前的状态） HEAD^
	git revert HEAD 
退回上上个版本
	git reset --hard HEAD^^
	git revert [倒数第一个提交] [倒数第二个提交]
退回前100个版本
	git reset --hard HEAD~100
获取所有版本的版本号（过去和现在出现过的所有版本）
	git reflog
通过版本号选择版本
	git reset --hard +版本号 （此版本号之后的提交都会被丢弃）
删除文件
	rm filename
	若要彻底删除文件,即提交修改
		git commit filename -m "message"
删除文件
	git rm filename
撤销未加入暂存区的文件的所有修改，即文件修改后未使用add命令
此时使用撤销命令 使文件恢复至修改前状态 注意 是 --filename  两个 --
	git checkout --filename


创建分支
	git branch branchName
切换分支
	git checkout branchName
创建并切换分支 相当于上面两行命令
	git checkout -b branchName
查看所有分支
	git branch
查看分支合并图
	git log --graph
合并其它分支到当前分支
	git merge otherBranchName
禁用快速模式合并其它分支到当前分支
	git merge -no-ff -m "message" otherBranchName
删除分支
	git branch -d branchName


隐藏当前分支的工作现场
	git stash
	添加备注，便于查找
	git stash save "stashName"
查看隐藏的工作现场
	git stash list
恢复隐藏的工作现场
	git stash apply [stashName]
删除工作stash
	git stash drop [stashName]
恢复隐藏的工作现场并删除stash  相当于前面两行命令
	git stash pop  [stashName]


一定要注意,如果你在创建github仓库时，初始化了一个readme.md文件,远程仓库不是空的，
则需要先将远程仓库与本地仓库同步,使用命令:git pull --rebase origin master.
将远程文件拉回本地仓库,然后再执行:git push origin master,就能成功了.


Conditional  用來自定義條件注解 滿足該注解條件 執行該注解修飾的類
Import  用来导入外部组件



VMware部分
	配置静态IP
		修改WindowsVMnet8的IP  网关  子网掩码
		虚拟机： 编辑-->虚拟网络编辑器  修改Nat连接设置 设置为同一网段的IP 网关相同 子网掩码相同
		在Linux中 vim /etc/sysconfig/network-scripts/ifcfg-ens33 设置IP在同一网段 网关相同 子网掩码相同
		重启network

	关于kali设置静态IP后无法联网问题
		1 确定网络配置文件正确
			vim /etc/network/interfaces
			添加
				 auto eth0  		//开机自加载
				 iface eth0 static
				 address 192.168.233.222
				 netmask 255.255.255.0
				 gateway 192.168.233.2
		2 确定 DNS 配置是否正确
			vim /etc/resolv.conf
			添加或修改 nameserver 114.114.144.144
					   nameserver 8.8.8.8


Docker

	修改docker镜像源
		1 修改或创建 /etc/docker/daemon.json
		 {
 
			 "registry-mirrors": ["http://hub-mirror.c.163.com"]
 
		 }
		2 重启守护进程
			systemctl daemon-reload
		3 重启docker 
			systemctl restart docker.service
		
	查看docker使用磁盘的情况
		docker system df 
	删除无用的docker文件（具体文件，执行该命令会提示）
		docker system prune -a 
		
		
	将软件应用制作为docker镜像：
		sudo docker import ubuntu-14.04-x86_64.tar.gz ubuntu:14.04
		
	docker开启远程连接设置：(用于idea自动部署项目)
		1 vim  /usr/lib/systemd/system/docker.service 或者  vim /lib/systemd/system/docker.service  二者是同一个文件 改一即可
		2 找到ExecStart=/usr/bin/dockerd-current  在后面添加 -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock
		3 重启docker systemctl daemon-reload && systemctl restart docker
		4 测试设置是否成功  docker -H tcp://jing.tk:2375 images  或用idea 安装docker插件添加docker 填入 tcp://jing.tk:2375 测试
		
	两个文件路径：可以指定文件在宿主机的位置和容器中的位置
		-v /usr/local/test:/opt/hello 宿主机创建 /var/local/test文件   在docker容器内部创建 /opt/hello文件
	一个文件路径：可以指定文件在容器中的位置  不能指定文件在宿主机的位置
		-v /usr/local/test 在docker容器内部创建 /usr/local/test 宿主机创建的位置在/var/lib/docker/volumes/aa1cc3226eadcc50859eb25833d80e30d04dcc2d286f0524f2688c4e3d4c824a/_data
		一串字符对应一个容器不重复 可以通过 docker inspect 容器名 查看 mounts 的 source 代表宿主机中文件路径  Destination 代表容器中的文件路径
	--volumes-from  容器删除 容器创建的数据仍存在宿主机中 不会删除
		docker run -it --name 容器1 --volumes-from 容器2  centos /bin/bash  将容器2的文件作为容器1的共享文件
	删除临时的没有使用的docker文件： docker image prune

	创建并运行centos容器：
		docker run -itd --name co1 <containerID> /bin/bash
	进入容器内部：
		docker attach co1
		
	创建es容器
		docker run --name es4 -d  -e "discovery.type=single-node" -p 9204:9200 -p 9304:9300 elasticsearch:7.6.1
		说明：不要加 -e “ES-JAVA-OPTS"参数 否则es都会自动stop
		
		配置es跨域：
			docker exec -it es4 /bin/bash
			vim config/elasticsearch.yml 
			新增参数：
				http.cors.enabled: true
				http.cors.allow-origin: "*"
	
	创建kibana容器
		docker run --name kib -d -p 5601:5601 --link es -e "ELASTICSEARCH_URL=http://heavens.tk:9200" kibana:6.8.7
		官方说明（来源打印日志） URL 被废弃 使用 HOSTS 代替 即 ELASTICSEARCH_HOSTS
		--link es : 被链接的 elasticsearch容器名称
	
	创建jenkins容器
		official版：（容器不是最新的 无法安装很多插件）
		非official版：（最新的）
		docker run -d --name jenkins -p 8000:8080 -p 50000:50000 -v /usr/local/jenkins:/var/jenkins_home jenkins
		访问8000端口进入页面，密码见页面提示进入容器内部查看指定文件（不要用8080 也要备案）
		也可直接查看日志 里面可见初始密码
		说明：
			正常情况下Jenkins无法启动，因为Jenkins默认uid=1000(jenkins) gid=1000(jenkins) groups=1000(jenkins)
			而我挂载的目录属于root用户，所以查看日志报错正是权限问题
			修改挂载目录所属者 (user:usergroup)
				chown -R 1000:1000 /var/jenkins_home
			若此还不能解决问题可关闭selinux
	
	创建fastDFS容器
		1 创建tracker容器
			docker run -d --name tracker -v /usr/local/fdfs/tracker_data/:/fastdfs/tracker/data --net=host season/fastdfs tracker
		2 创建storage容器
			docker run -d --name storage -v /usr/local/fdfs/storage_data/:/fastdfs/storage/data -v /usr/local/fdfs/storage_path/:/fastdfs/store_path  --net=host -e TRACKER_SERVER:jing.tk  season/fastdfs storage
		3 进入storage容器 修改/fdfs_conf/storage.conf文件，将tracker_server的IP改为自己的IP 端口改为自己的端口(默认 22122和8888端口） 之后重启storage
		4 进入storage容器 执行/usr/local/bin/fdfs_monitor  /fdfs_conf/storage.conf 命令可以查看storage和tracker的联系信息 ip_addr后面有ACTIVE即为连接成功
		5 进入/fastdfs/storage/目录(默认文件存储目录) 执行fdfs_upload_file /fdfs_conf/storage.conf pic.png 命令实现文件上传 上传成功会返回一串文件url
		6 在浏览器输入ip:port(默认8888)/url 查看上传的文件
		
	创建网络：
		1 docker network create networkName  
	连接网络(将已存在容器加入网络）：
		2 docker network connect networkName containerID/containerName
	连接网络(创建容器时直接将容器加入网络)：
		2.5 docker run xxx -d --name yyyy -p uu:kk ...  (加此参数即可)--net networkName  containerID/containerName
	断开网络
		3 docker network disconnect networkName containerID/containerName
	查看网络详细信息：
		4 docker network inspect networkName
	查看所有网络名称：
		5 docker network ls
		
	创建mongoDB数据库
		1 docke run --name mongodbName -d -p 27017:27017 mongo:latest --auth (--auth 开启认证)
		2 创建管理员用户，该用户用于给其它用户分配权限，本身不能操作数据库的数据(不严谨，懂就行)
			2.1 用户名密码随意，角色信息和db不能乱改
			2.2 db.createUser({ user: 'root', pwd: 'root#', roles: [ { role: "userAdminAnyDatabase", db: "admin" } ] });
			2.3 创建完成之后 认证用户 db.auth('root','root#')
		3 创建普通用户，用于连接数据库并操作数据库数据
			3.0 至关重要，在创建完管理员账户后，一定要先use要操作的数据库，再创建用户，否则，默认为test库，不是自己想要操作的数据库
			3.1 用户密码随意，db要写想要操作的数据库，写错了认证失败
			3.2 db.createUser({ user: 'mg1', pwd: 'root#', roles: [ { role: "readWrite", db: "mg1" } ] });
			3.3 认证用户 db.auth('mg1','root#')
	
	Oracle相关
		1 安装Oracle，参考github
			https://github.com/oracle/docker-images/tree/master/OracleDatabase/SingleInstance
		2 查看当前使用的容器	
			select sys_context('USERENV','CON_NAME') FROM DUAL;
		3 查看pdb容器的状态
			select con_id,dbid,NAME,OPEN_MODE from v$pdbs;
		4 打开pdb容器
			alter pluggable database ORCLPDB open;
		5 切换到ORCLPDB容器(如果使用ORCLCDB容器 在创建用户和表空间时必须在头部加c##或C##)
			alter session set container=ORCLPDB;
		6 查看Oracle的临时表空间路径
			select name from v$tempfile; 
		7 创建表空间，zlx.dbf为自己将要创建的表空间数据文件
			CREATE tablespace ZLX datafile '/opt/oracle/oradata/ORCLCDB/ORCLPDB1/zlx.dbf' size 500M reuse autoextend on next 50M maxsize unlimited;
		8 查看所有表空间
			select tablespace_name from dba_tablespaces;
		9 创建用户并赋予表空间
			CREATE USER ZLX IDENTIFIED BY root# DEFAULT tablespace ZLX temporary tablespace TEMP;
		10 给用户授权
			grant connect , resource , dba to ZLX ;
		11 普通用户登录，其中 ORCLPDB1是通过2查看到的（但未登录无法查询），默认为ORCLPDB1或ORCLCDB
			sqlplus ZLX/root#@localhost:1521/ORCLPDB1
			通过navicat登录时 选择服务名登录 服务名就是 ORCLPDB1或ORCLCDB
		12 管理员用户登录
			sys无法登录
			system登录时 选择sid登录 服务名参考上一条
			pdbadmin登录时 参考普通用户
		13 创建自增序列
			create sequence seq_on_as 
			increment by 1
			start with 1
			nomaxvalue
			nocycle
			nocache;
		14 查看创建的自增序列
			select * from user_sequences;
			
			
MySQL主从复制数据库配置
	0 编写配置文件 主从皆需
		[mysqld]

		server-id=randomInt(任意整数) 但master的id要比slave大

		datadir=/var/lib/mysql

		log-bin=mysql-bin 日志文件

		sql_mode=STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION

	1 将本地的配置文件映射到MySQL容器以代替容器的默认配置文件  并将数据存放到本地
		docker run --name master -v /usr/local/database/mysql/mysql-3310.cnf:/etc/my.cnf -v /usr/local/database/mysql/mysql-3310:/var/lib/mysql -p 3310:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql
		slave 同理

	2 为root用户添加权限 或者新建用户赋予权限
		1）进入master容器
			docker exec -it master /bin/bash
		2)赋予权限
			grant all privileges on *.* to root@'%' with grand option;
		3）刷新权限 并退出容器
			flush privileges;
			exit
	3 用navicat连接master和slave
	4 master 新建查询 查看master状态  并记录 File 值 和 Position 值
		show status;
	5 在slave新建查询
		1）执行 stop slave;
		2）执行 CHANGE MASTER TO MASTER_HOST='192.168.233.111',MASTER_PORT=3310,MASTER_USER='root',MASTER_PASSWORD='root',MASTER_LOG_FILE='mysql-bin.000003',MASTER_LOG_POS=557;
		   其中 MASTER_LOG_FILE 的值为 4 中记录的File值  MASTER_LOG_POS值为 4 中记录的Position值
		3）执行 start slave;
		4）执行 show slave  status 若 Slave_IO_State的值为 Waiting for master to send event 则配置成功  若值为 connecting to master 也不一定是失败了 验证一下看看
	6 验证配置是否成功
		1）在master新建查询 创建数据库和数据表
		2）在slave新建查询 查询是否出现master创建的数据库和表 若有 则配置成功 否则 重启一下MySQL试试 (docker restart master) 若还不行  重配吧 但是步骤就是这样不会错


Redis 数据类型除了5个常用的 还有 HyperLogLog ：用于计数  Geo ：用于存储地理位置信息


SQL语句执行过程
	1 客户端发送sql语句到服务端
	2 服务端接收sql语句并解析
	3 服务端解析无误执行sql语句 解析包括 查询高速缓存  语法检查 语义检查 访问权限的核对  确定最佳执行计划
	4 提取数据 即 服务端将执行后的sql结果返回给客户端


事务的隔离级别
	读未提交：1 出现脏读 即其它客户端能读取到未提交的数据（脏数据）
			  2 不可重复读 即一个用户对数据进行两次查询操作 结果不一致（比如支付时显示有余额真正支付时显示余额不足）
			  3 幻读 即用户查询时有5条数据 再次查询时 有6条数据或3条数据（出现了insert 和delete操作 ）两次查询结果数据数量不一致
	读已提交 出现问题 2，3
	可重复读 出现问题 3 ，当有用户执行查询操作时，其它用户无法进行update操作，可以进行delete 和 insert操作 故有幻读
	序列化   无任何问题 效率最低

事务失效场景：
	1 事务只对public的方法有效，private和protected等修饰的方法无效
	2 MyISAM不支持事务
	3 事务默认是对RuntimeException异常进行的回滚，若是抛出Exception则事务不会生效，通过配置可以指定事务触发的异常类型@Transactional(rollbackFor = Exception.class)
	4 若是使用try catch捕获异常而没有抛出RuntimeException异常，事务不会回滚(参照3）
	5 对象没有交给spring管理，比如service层没有加@service注解，加事务无效
	6 同一个类中的方法相互调用，事务不会生效。原因是：同一个类中方法相互调用，切面无效。而事务是通过aop实现的故而无效（5亦类似）。
	7 数据源没有配置事务管理器
		@Bean
		public PlatformTransactionManager transactionManager(DataSource dataSource) {
   			 return new DataSourceTransactionManager(dataSource);
		}
	
MySQL索引
	1 必须遵循最左原则
	2 不能跳过某条索引
	3 范围查询之右的查询条件无法使用到索引
	4 索引字段中有null值，索引失效，所以建表的时候尽量给其默认值或设为not null
	5 尽量给索引设置前缀长度以节省磁盘和减少I/O，提高查询效率
	6 判断null值 索引失效
	7 判断 != 索引失效
	8 判断 num=10 or num=20 索引失效，可改为unionall查询  num=10 unionall num=20
	9 in not in慎用
	10 避免对条件字段进行运算，如 where num/2 = 100 可改为 where num = 100*2
	11 
	
	
possible_keys:理论上是否应该用到索引
keys		：实际上是否用到了索引

左连接 索引加在右表  右连接索引加在左表

读锁
	session1 对一个表A加了 读锁 在解锁表A前 session1 只能读表A 不能对表A进行其它操作，也不能读取和操作其他表
	session2 加了锁的表A 只能进行读操作 无法进行写操作（写操作会一直阻塞，直到表A unlock）
写锁
	session1 对表B加了写锁 session1只能对表B进行写操作，读操作会阻塞，在未解锁表B前不能读写其它表
	session2 可以操作其他表 但不能读写表B（查询和修改都阻塞，直到表B解锁）

读锁阻塞写不阻塞读  写锁阻塞读和写
若索引失效  行锁会变表锁
锁定一行：
	update tableA set name="xxx" where id = 1 for update;
	


InsertOrUpdate函数批量新增或更新时useGeneratedKes会返回0，1，2三个值，0代表无操作，1代表插入，2代表更新 
并不会返回主键
auto_increment 批量操作时会返回第一个受影响的id不会返回全部id 若想获得受影响的id 则需要先获取受影响的行数通过返回的
第一个受影响的id值和增长步长及受影响的行数算出受影响的id集合

MySQL的DATE_FORMAT（）函数
	SELECT DATE_FORMAT(update_time,'%Y-%m-%d %T') `update_time` FROM `article` ;
	具体参数含义 百度 https://www.w3school.com.cn/sql/func_date_format.asp
	
MySQL group by语句的坑
	group by 语句与having一起使用时 having在后
	group by 语句与 order by 一起使用时 order by在后 并且 order by中的字段 必须为group by中存在的字段，若想关闭这种规则见下。
	
MySql 修改sql_mode 模式 关闭ONLY_FULL_GROUP_BY模式
	在my.cnf中添加：sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' 
	查询sql_mode 模式： select @@sql_mode;
	
MySQL配置忽略大小写
	在my.cnf 中添加lower_case_table_names=1，（对于8.0+）必须是MySQL第一次启动之前配置此项 否则无效

MySQL配置时区
	在my.cnf 中添加 default-time_zone='+8:00'

动态sql
	<trim>标签
		prefix ： 必须在sql前面添加的东西
		suffix ： 必须在sql后面添加的东西
		prefixOverrides: 在sql前面按需添加或删除的东西
		suffixOverrides：在sql后面按需添加或删除的东西
	<selectKey>标签
		目的：获取主键id
		order:
			before：在sql语句执行前执行该标签中的语句
			after： 在sql语句执行后执行该标签中的sql
		keyProperty: 被操作的属性名称	

正则表达式：
	1 匹配汉字：^[\u4e00-\u9fa5]+$
	2 匹配月份：^(0?[1-9]|1[0-2])$
	3 匹配日期：^(0?[1-9]|[1-2][0-9]|30|31)$
	
	
	









